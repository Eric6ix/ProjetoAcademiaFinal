// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Funcionario {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  name        String
  phone       String
  dataNasc    String
  dataContra  String
  password    String
  UserCriacao DateTime @default(now())
  UserEdicao  DateTime @updatedAt
}

model Aluno {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  name        String
  phone       String
  peso        Float
  dataNasc    String
  password    String
  UserCriacao DateTime @default(now())
  UserEdicao  DateTime @updatedAt
}

model Produto {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  compras        CompraProduto[]
  ProdutoCriacao DateTime        @default(now())
  ProdutoEdicao  DateTime        @updatedAt
}

model Compra {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime        @default(now())
  total    Float
  estado   String // Ex: 'pendente', 'conclu√≠da'
  produtos CompraProduto[]
}

model CompraProduto {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  compraId   String   @map("compra_id") @db.ObjectId
  produtoId  String   @map("produto_id") @db.ObjectId
  quantidade Int
  preco      Float
  compra     Compra   @relation(fields: [compraId], references: [id])
  produto    Produto  @relation(fields: [produtoId], references: [id])
  diacompra  DateTime @default(now())
}
